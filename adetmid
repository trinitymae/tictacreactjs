import React, { useState, useEffect, createContext, useContext } from 'react';

// Game Context
const GameContext = createContext();

// Main Game Component
const TicTacToeGame = () => {
  const [screen, setScreen] = useState('menu'); // menu, game, results
  const [gameMode, setGameMode] = useState(null); // vsComputer, vsPlayer
  const [currentPlayer, setCurrentPlayer] = useState('X');
  const [board, setBoard] = useState(Array(9).fill(null));
  const [winner, setWinner] = useState(null);
  const [xScore, setXScore] = useState(0);
  const [oScore, setOScore] = useState(0);
  const [draws, setDraws] = useState(0);

  // Reset the game
  const resetGame = () => {
    setBoard(Array(9).fill(null));
    setCurrentPlayer('X');
    setWinner(null);
  };

  // Return to menu
  const returnToMenu = () => {
    resetGame();
    setScreen('menu');
    setGameMode(null);
  };

  // Check for winner
  const checkWinner = (boardState) => {
    const winPatterns = [
      [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
      [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns
      [0, 4, 8], [2, 4, 6]             // diagonals
    ];

    for (const pattern of winPatterns) {
      const [a, b, c] = pattern;
      if (boardState[a] && boardState[a] === boardState[b] && boardState[a] === boardState[c]) {
        return boardState[a];
      }
    }

    // Check for draw
    if (boardState.every(cell => cell !== null)) {
      return 'draw';
    }

    return null;
  };

  // Handle cell click
  const handleCellClick = (index) => {
    if (board[index] || winner) return;

    const newBoard = [...board];
    newBoard[index] = currentPlayer;
    setBoard(newBoard);

    const gameWinner = checkWinner(newBoard);
    if (gameWinner) {
      setWinner(gameWinner);
      if (gameWinner === 'X') setXScore(xScore + 1);
      else if (gameWinner === 'O') setOScore(oScore + 1);
      else setDraws(draws + 1);
      setScreen('results');
      return;
    }

    setCurrentPlayer(currentPlayer === 'X' ? 'O' : 'X');
  };

  // Computer move
  useEffect(() => {
    if (gameMode === 'vsComputer' && currentPlayer === 'O' && !winner) {
      const timer = setTimeout(() => {
        const emptyCells = board.map((cell, idx) => cell === null ? idx : null).filter(idx => idx !== null);
        
        if (emptyCells.length > 0) {
          // Simple AI: random move
          const randomIndex = emptyCells[Math.floor(Math.random() * emptyCells.length)];
          handleCellClick(randomIndex);
        }
      }, 500);
      
      return () => clearTimeout(timer);
    }
  }, [currentPlayer, gameMode, board, winner]);

  // Shared state and functions
  const contextValue = {
    screen,
    setScreen,
    gameMode,
    setGameMode,
    currentPlayer,
    board,
    winner,
    xScore,
    oScore, 
    draws,
    handleCellClick,
    resetGame,
    returnToMenu
  };

  return (
    <GameContext.Provider value={contextValue}>
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4">
        <h1 className="text-3xl font-bold text-blue-600 mb-6">Tic-Tac-Toe</h1>
        
        {screen === 'menu' && <MenuScreen />}
        {screen === 'game' && <GameScreen />}
        {screen === 'results' && <ResultsScreen />}
      </div>
    </GameContext.Provider>
  );
};

// Menu Screen Component
const MenuScreen = () => {
  const { setScreen, setGameMode } = useContext(GameContext);

  const startGame = (mode) => {
    setGameMode(mode);
    setScreen('game');
  };

  return (
    <div className="flex flex-col items-center bg-white rounded-lg shadow-lg p-8 w-full max-w-md">
      <h2 className="text-2xl font-semibold mb-6">Select Game Mode</h2>
      <div className="flex flex-col w-full gap-4">
        <Button onClick={() => startGame('vsComputer')} color="blue">
          Play vs Computer
        </Button>
        <Button onClick={() => startGame('vsPlayer')} color="green">
          Play vs Another Player
        </Button>
      </div>
    </div>
  );
};

// Game Screen Component
const GameScreen = () => {
  const { gameMode, currentPlayer, xScore, oScore, draws, returnToMenu } = useContext(GameContext);

  return (
    <div className="flex flex-col items-center w-full max-w-md">
      <div className="flex justify-between w-full mb-4 bg-white rounded-lg shadow p-4">
        <div className="text-center">
          <div className="font-bold">X</div>
          <div>{xScore}</div>
        </div>
        <div className="text-center">
          <div className="font-bold">Draws</div>
          <div>{draws}</div>
        </div>
        <div className="text-center">
          <div className="font-bold">O</div>
          <div>{oScore}</div>
        </div>
      </div>
      
      <div className="bg-white rounded-lg shadow-lg p-6 w-full">
        <div className="mb-4 text-center">
          <h2 className="text-xl font-semibold">
            {gameMode === 'vsComputer' ? 'Playing vs Computer' : 'Player vs Player'}
          </h2>
          <p className="text-gray-600">Current Player: {currentPlayer}</p>
        </div>
        
        <Board />
        
        <div className="mt-6 flex justify-center">
          <Button onClick={returnToMenu} color="gray">
            Back to Menu
          </Button>
        </div>
      </div>
    </div>
  );
};

// Results Screen Component
const ResultsScreen = () => {
  const { winner, resetGame, returnToMenu } = useContext(GameContext);

  return (
    <div className="bg-white rounded-lg shadow-lg p-8 w-full max-w-md text-center">
      <h2 className="text-2xl font-bold mb-4">Game Over</h2>
      <p className="text-xl mb-6">
        {winner === 'draw' 
          ? "It's a Draw!" 
          : `Player ${winner} Wins!`}
      </p>
      
      <div className="flex flex-col gap-4">
        <Button onClick={resetGame} color="blue">
          Play Again
        </Button>
        <Button onClick={returnToMenu} color="gray">
          Return to Menu
        </Button>
      </div>
    </div>
  );
};

// Board Component
const Board = () => {
  const { board } = useContext(GameContext);
  
  return (
    <div className="grid grid-cols-3 gap-2 w-full max-w-xs mx-auto">
      {board.map((cell, index) => (
        <Cell key={index} index={index} value={cell} />
      ))}
    </div>
  );
};

// Cell Component
const Cell = ({ index, value }) => {
  const { handleCellClick } = useContext(GameContext);
  
  return (
    <button 
      className={`h-16 w-full bg-gray-100 rounded flex items-center justify-center text-2xl font-bold ${
        value === 'X' ? 'text-blue-600' : 'text-red-600'
      }`}
      onClick={() => handleCellClick(index)}
    >
      {value}
    </button>
  );
};

// Button Component
const Button = ({ children, onClick, color }) => {
  const colors = {
    blue: "bg-blue-600 hover:bg-blue-700 text-white",
    green: "bg-green-600 hover:bg-green-700 text-white",
    gray: "bg-gray-300 hover:bg-gray-400 text-gray-800"
  };
  
  return (
    <button 
      className={`py-2 px-4 rounded font-medium w-full ${colors[color]} transition-colors`}
      onClick={onClick}
    >
      {children}
    </button>
  );
};

export default TicTacToeGame;
